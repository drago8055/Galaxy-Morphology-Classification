# -*- coding: utf-8 -*-
"""Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L66izl-Ox7IcC9V3P81OxZRtH68o0DA_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def plotBar(hog,lbp,im):
    fig, ax = plt.subplots()
    ind = np.arange(11)    # the x locations for the groups
    width = 0.2       # the width of the bars
    p1 = ax.bar(ind, hog, width, color='r')
    p2 = ax.bar(ind + width, lbp, width,color='y')
    p3 = ax.bar(ind+width+width, im ,width, color='g')
    plt.legend(["HOG","LBP","Image Moment"])
    plt.xlabel("Questions")
    plt.ylabel("RMSE")
    plt.title("Feature vs Question vs RMSE")
    plt.show()

df=pd.read_csv("training_solutions_rev1.csv")
# df=df.drop("GalaxyID",axis=1)

y=["GalaxyID"]
for x in df.columns[1:]:
    y.append(str(int(x[-1])-1))
df.columns=y

#Separation of questions
Q1=df.iloc[:, 1:4]
q1=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q2=df.iloc[:, 4:6]
q2=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q3=df.iloc[:, 6:8]
q3=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q4=df.iloc[:, 8:10]
q4=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q5=df.iloc[:, 10:14]
q5=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q6=df.iloc[:, 14:16]
q6=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q7=df.iloc[:, 16:19]
q7=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q8=df.iloc[:, 19:26]
q8=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q9=df.iloc[:, 26:29]
q9=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q10=df.iloc[:, 29:32]
q10=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)
Q11=df.iloc[:, 32:38]
q11=pd.concat([df["GalaxyID"].to_frame(),Q1],axis=1)

Q_idx=[Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11]

questions=[Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11]
#Each question with it's highest probability class for each datapoint
q_labels=[]
for i in range(11):
    q_labels.append((questions[i].idxmax(axis=1).to_frame()))
#Each question with it's highest probability for each datapoint
q_labels_prob=[]
for i in range(11):
    q_labels_prob.append((questions[i].max(axis=1).to_frame()))

q_class_probab=pd.concat(q_labels_prob,axis=1)
q_class_probab=pd.concat([df["GalaxyID"].to_frame(),q_class_probab],axis=1)
q_class_probab.columns=['GalaxyId','Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10','Q11']
q_class=pd.concat(q_labels,axis=1)
q_class=pd.concat([df["GalaxyID"].to_frame(),q_class],axis=1)
q_class.columns=['GalaxyId','Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10','Q11']

q_class

train_split_class=q_class.iloc[:7000,:]
test_split_class=q_class.iloc[7000:10000,:]

each_qdf_train=[]
each_qdf_test=[]
for i in range(1,12):
    s="Q"+str(i)
    temp_df1=train_split_class[["GalaxyId",s]]
    temp_df2=test_split_class[["GalaxyId",s]]
    each_qdf_train.append(temp_df1)
    each_qdf_test.append(temp_df2)

for i in range(11):
    file_name1="Q"+str(i+1)+"_train"+".csv"
    file_name2="Q"+str(i+1)+"_test"+".csv"
    each_qdf_train[i].to_csv(file_name1)
    each_qdf_test[i].to_csv(file_name2)

hog=[0.09652625433414512, 0.15360113147910426, 0.17256288826305138, 0.1890676215997285, 0.04885036244316478, 0.13715244390579695, 0.09148370514067063, 0.01920213439356059, 0.10153270455747648, 0.09570165508801155, 0.030690165212587727]
lbp=[0.07196763179096223, 0.1248387048525248, 0.128631667306605, 0.1357577621336917, 0.042593155973258474, 0.06819268814385024, 0.07507782316242746, 0.018042617159707886, 0.09914381559068676, 0.0854349443800745, 0.027960121141596978]
im=[0.07776083723227388, 0.1263842610156445, 0.12897466689267892, 0.13699003008404487, 0.042867747991619194, 0.0673558458805449, 0.07640211689492869, 0.018058049725884963, 0.0993104068450551, 0.08558603783620879, 0.0280181726188241]
print("Linear regression:")
plotBar(hog,lbp,im)

hog=[0.07879490190612377, 0.1264636737479915, 0.12883303199479917, 0.13728021615288194, 0.042909335581535354, 0.06872239312948386, 0.0764688760838494, 0.018083135932463072, 0.0993138244747339, 0.0854839350029745, 0.028016165016722838]
lbp=[0.07879490190612377, 0.1264636737479915, 0.12883303199479917, 0.13728021615288194, 0.042909335581535354, 0.06872239312948386, 0.0764688760838494, 0.018083135932463072, 0.0993138244747339, 0.0854839350029745, 0.028016165016722838]
im=[0.07790185095326717, 0.126312639328812, 0.12881658247861874, 0.13695367719244475, 0.04285409465930696, 0.0676119633563631, 0.07634711707288645, 0.018062729626956285, 0.0993089036008359, 0.08548885858858302, 0.028004903863081767]
print("Lasso Regression:")
plotBar(hog,lbp,im)

hog=[0.06709163941600697, 0.11294906184985593, 0.1272434717827885, 0.13414476639522435, 0.0411297575108739, 0.06717222346540266, 0.07059526390261724, 0.01800686368796664, 0.09867127745614068, 0.0851499390388744, 0.02786917349577155]
lbp=[0.07359150825262811, 0.12591527552246098, 0.12871988631964845, 0.13601939589485437, 0.042688396228247265, 0.06842257661904566, 0.07555021226393094, 0.01805424096354191, 0.09922606706879357, 0.08544783789696835, 0.027975909989862286]
im=[0.07776938508426824, 0.12638658271626604, 0.1289613362119226, 0.1370329458204284, 0.04287327000721812, 0.06732082913973665, 0.07640395506491522, 0.018048784895245782, 0.09931617326321802, 0.08555808407301935, 0.028005766459842752]
print("Ridge Regression:")
plotBar(hog,lbp,im)